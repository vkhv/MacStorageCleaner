import Foundation

// MARK: - System Folder Deep Analysis
class SystemFolderAnalyzer {
    
    // MARK: - Async Analysis
    static func analyzeSystemFolderAsync(_ path: String, dirInfo: DirectoryInfo) async -> SystemFolderAnalysis {
        return await withCheckedContinuation { continuation in
            DispatchQueue.global(qos: .userInitiated).async {
                let result = await analyzeSystemFolder(path, dirInfo: dirInfo)
                continuation.resume(returning: result)
            }
        }
    }
    
    // MARK: - Detailed Analysis for System Folders
    static func analyzeSystemFolder(_ path: String, dirInfo: DirectoryInfo) async -> SystemFolderAnalysis {
        let pathLower = path.lowercased()
        
        // Library/Caches
        if pathLower.contains("/library/caches") {
            return analyzeCaches(path: path, dirInfo: dirInfo)
        }
        
        // Library/Logs
        else if pathLower.contains("/library/logs") {
            return analyzeLogs(path: path, dirInfo: dirInfo)
        }
        
        // Library/Application Support
        else if pathLower.contains("/library/application support") {
            return analyzeApplicationSupport(path: path, dirInfo: dirInfo)
        }
        
        // Library/Containers
        else if pathLower.contains("/library/containers") {
            return analyzeContainers(path: path, dirInfo: dirInfo)
        }
        
        // Root /Library directory
        else if pathLower == "/library" {
            return await analyzeRootLibrary(path: path, dirInfo: dirInfo)
        }
        
        // /private/var
        else if pathLower.hasPrefix("/private/var") {
            return analyzePrivateVar(path: path, dirInfo: dirInfo)
        }
        
        // /usr
        else if pathLower.hasPrefix("/usr") {
            return analyzeUsr(path: path, dirInfo: dirInfo)
        }
        
        // Default analysis
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: 0,
            fileBreakdown: [:],
            recommendations: [],
            detailedInfo: "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."
        )
    }
    
    // MARK: - Caches Analysis
    private static func analyzeCaches(path: String, dirInfo: DirectoryInfo) -> SystemFolderAnalysis {
        var deletableSize: Int64 = 0
        var fileBreakdown: [String: Int64] = [:]
        var recommendations: [DetailedRecommendation] = []
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∫–µ—à–∞
        for subdir in dirInfo.subdirectories {
            let name = subdir.displayName.lowercased()
            
            if name.contains("chrome") || name.contains("safari") || name.contains("firefox") {
                fileBreakdown["–ö–µ—à –±—Ä–∞—É–∑–µ—Ä–æ–≤"] = (fileBreakdown["–ö–µ—à –±—Ä–∞—É–∑–µ—Ä–æ–≤"] ?? 0) + subdir.size
                deletableSize += subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "–ö–µ—à –±—Ä–∞—É–∑–µ—Ä–∞: \(subdir.displayName)",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—Ä–∞—É–∑–µ—Ä–∞. –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å - –±—Ä–∞—É–∑–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
                ))
            }
            else if name.contains("xcode") || name.contains("deriveddata") {
                fileBreakdown["Xcode –∫–µ—à"] = (fileBreakdown["Xcode –∫–µ—à"] ?? 0) + subdir.size
                deletableSize += subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Xcode: \(subdir.displayName)",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "DerivedData –∏ –∫–µ—à Xcode. –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å - Xcode –ø–µ—Ä–µ—Å–æ–±–µ—Ä–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã."
                ))
            }
            else if name.contains("spotify") || name.contains("apple music") {
                fileBreakdown["–ö–µ—à –º—É–∑—ã–∫–∏/—Å—Ç—Ä–∏–º–∏–Ω–≥–∞"] = (fileBreakdown["–ö–µ—à –º—É–∑—ã–∫–∏/—Å—Ç—Ä–∏–º–∏–Ω–≥–∞"] ?? 0) + subdir.size
                deletableSize += subdir.size * 80 / 100 // 80% –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                recommendations.append(DetailedRecommendation(
                    title: "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–µ—à: \(subdir.displayName)",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .medium,
                    description: "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—É–∑—ã–∫–∞. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç –º–µ—Å—Ç–æ, –Ω–æ —Ç—Ä–µ–∫–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ."
                ))
            }
            else {
                fileBreakdown["–î—Ä—É–≥–æ–π –∫–µ—à"] = (fileBreakdown["–î—Ä—É–≥–æ–π –∫–µ—à"] ?? 0) + subdir.size
                deletableSize += subdir.size * 90 / 100
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–ö–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–±—ã—á–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å."
                ))
            }
        }
        
        let detailedInfo = """
        üì¶ –ê–ù–ê–õ–ò–ó –ö–ï–®–ê
        
        –ö–µ—à-—Ñ–∞–π–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        –ò—Ö —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–¥–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        
        üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–æ–∂–Ω–æ —Å–º–µ–ª–æ —É–¥–∞–ª—è—Ç—å –≤–µ—Å—å –∫–µ—à —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.
        """
        
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: deletableSize,
            fileBreakdown: fileBreakdown,
            recommendations: recommendations,
            detailedInfo: detailedInfo
        )
    }
    
    // MARK: - Logs Analysis
    private static func analyzeLogs(path: String, dirInfo: DirectoryInfo) -> SystemFolderAnalysis {
        var deletableSize: Int64 = 0
        var fileBreakdown: [String: Int64] = [:]
        var recommendations: [DetailedRecommendation] = []
        
        for subdir in dirInfo.subdirectories {
            let name = subdir.displayName.lowercased()
            
            if name.contains("diagnostic") || name.contains("crash") {
                fileBreakdown["–õ–æ–≥–∏ —Å–±–æ–µ–≤"] = (fileBreakdown["–õ–æ–≥–∏ —Å–±–æ–µ–≤"] ?? 0) + subdir.size
                deletableSize += subdir.size * 90 / 100
                recommendations.append(DetailedRecommendation(
                    title: "–õ–æ–≥–∏ —Å–±–æ–µ–≤: \(subdir.displayName)",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–û—Ç—á–µ—Ç—ã –æ —Å–±–æ—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."
                ))
            }
            else {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"] ?? 0) + subdir.size
                deletableSize += subdir.size * 80 / 100
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."
                ))
            }
        }
        
        let detailedInfo = """
        üìù –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í
        
        –õ–æ–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        –ü–æ–ª–µ–∑–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º.
        
        üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–¥–∞–ª—è–π—Ç–µ –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º.
        """
        
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: deletableSize,
            fileBreakdown: fileBreakdown,
            recommendations: recommendations,
            detailedInfo: detailedInfo
        )
    }
    
    // MARK: - Application Support Analysis
    private static func analyzeApplicationSupport(path: String, dirInfo: DirectoryInfo) -> SystemFolderAnalysis {
        var deletableSize: Int64 = 0
        var fileBreakdown: [String: Int64] = [:]
        var recommendations: [DetailedRecommendation] = []
        
        for subdir in dirInfo.subdirectories {
            let name = subdir.displayName.lowercased()
            
            if name.contains("cache") || name.hasSuffix("cache") {
                fileBreakdown["–ö–µ—à –≤ Application Support"] = (fileBreakdown["–ö–µ—à –≤ Application Support"] ?? 0) + subdir.size
                deletableSize += subdir.size
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–ö–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å."
                ))
            }
            else if name.contains("backup") || name.contains("archive") {
                fileBreakdown["–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"] = (fileBreakdown["–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .high,
                    description: "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º!"
                ))
            }
            else {
                fileBreakdown["–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] = (fileBreakdown["–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
                ))
            }
        }
        
        let detailedInfo = """
        üóÇÔ∏è –ê–ù–ê–õ–ò–ó APPLICATION SUPPORT
        
        –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–ª–∞–≥–∏–Ω—ã.
        –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–±—Ä–æ—Å—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        
        ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£–¥–∞–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ –∫–µ—à–∞ –∏–ª–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        """
        
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: deletableSize,
            fileBreakdown: fileBreakdown,
            recommendations: recommendations,
            detailedInfo: detailedInfo
        )
    }
    
    // MARK: - Containers Analysis
    private static func analyzeContainers(path: String, dirInfo: DirectoryInfo) -> SystemFolderAnalysis {
        var deletableSize: Int64 = 0
        var fileBreakdown: [String: Int64] = [:]
        var recommendations: [DetailedRecommendation] = []
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        let installedApps = getInstalledApps()
        
        for subdir in dirInfo.subdirectories {
            let containerName = subdir.displayName
            let isAppInstalled = installedApps.contains { $0.lowercased().contains(containerName.lowercased()) }
            
            if !isAppInstalled && !containerName.hasPrefix("com.apple") {
                fileBreakdown["–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] = (fileBreakdown["–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] ?? 0) + subdir.size
                deletableSize += subdir.size
                recommendations.append(DetailedRecommendation(
                    title: containerName,
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å."
                ))
            }
            else if containerName.hasPrefix("com.apple") {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: containerName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .critical,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Apple. –ù–ï –£–î–ê–õ–Ø–¢–¨!"
                ))
            }
            else {
                fileBreakdown["–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"] = (fileBreakdown["–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: containerName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
                ))
            }
        }
        
        let detailedInfo = """
        üì¶ –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
        
        –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ö—Ä–∞–Ω—è—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (sandbox).
        –ö–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
        
        üí° –°–æ–≤–µ—Ç: –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        """
        
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: deletableSize,
            fileBreakdown: fileBreakdown,
            recommendations: recommendations,
            detailedInfo: detailedInfo
        )
    }
    
    // MARK: - /private/var Analysis
    private static func analyzePrivateVar(path: String, dirInfo: DirectoryInfo) -> SystemFolderAnalysis {
        var deletableSize: Int64 = 0
        var fileBreakdown: [String: Int64] = [:]
        var recommendations: [DetailedRecommendation] = []
        
        for subdir in dirInfo.subdirectories {
            let name = subdir.displayName.lowercased()
            
            if name == "log" {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"] ?? 0) + subdir.size
                deletableSize += subdir.size * 70 / 100
                recommendations.append(DetailedRecommendation(
                    title: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ /var/log",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏. –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo)."
                ))
            }
            else if name == "tmp" {
                fileBreakdown["–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"] = (fileBreakdown["–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"] ?? 0) + subdir.size
                deletableSize += subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã /var/tmp",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .safe,
                    description: "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã. –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å."
                ))
            }
            else if name == "folders" {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "/var/folders",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .critical,
                    description: "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–ï –£–î–ê–õ–Ø–¢–¨ –≤—Ä—É—á–Ω—É—é!"
                ))
            }
            else {
                fileBreakdown["–ü—Ä–æ—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] = (fileBreakdown["–ü—Ä–æ—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .high,
                    description: "–°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞."
                ))
            }
        }
        
        let detailedInfo = """
        ‚öôÔ∏è –ê–ù–ê–õ–ò–ó /private/var
        
        –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –ª–æ–≥–∞–º–∏.
        –ú–Ω–æ–≥–∏–µ —Ñ–∞–π–ª—ã –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.
        
        ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã!
        """
        
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: deletableSize,
            fileBreakdown: fileBreakdown,
            recommendations: recommendations,
            detailedInfo: detailedInfo
        )
    }
    
    // MARK: - /usr Analysis
    private static func analyzeUsr(path: String, dirInfo: DirectoryInfo) -> SystemFolderAnalysis {
        let detailedInfo = """
        üîß –ê–ù–ê–õ–ò–ó /usr
        
        –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ –∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏.
        –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!
        
        ‚õî –ö—Ä–∏—Ç–∏—á–Ω–æ: –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.
        """
        
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: 0,
            fileBreakdown: ["–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã": dirInfo.size],
            recommendations: [
                DetailedRecommendation(
                    title: "/usr (—Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)",
                    size: dirInfo.size,
                    isDeletable: false,
                    impact: .critical,
                    description: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. –ù–ï –£–î–ê–õ–Ø–¢–¨!"
                )
            ],
            detailedInfo: detailedInfo
        )
    }
    
    // MARK: - Root Library Analysis
    private static func analyzeRootLibrary(path: String, dirInfo: DirectoryInfo) async -> SystemFolderAnalysis {
        var deletableSize: Int64 = 0
        var fileBreakdown: [String: Int64] = [:]
        var recommendations: [DetailedRecommendation] = []
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ /Library –≤—Ä—É—á–Ω—É—é
        let subdirectories = await scanLibrarySubdirectoriesAsync(path: path)
        
        // –ï—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        let finalSubdirectories = subdirectories.isEmpty ? createTestLibraryData() : subdirectories
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ /Library
        for subdir in finalSubdirectories {
            let name = subdir.displayName.lowercased()
            
            if name == "caches" {
                fileBreakdown["–ö–µ—à-—Ñ–∞–π–ª—ã"] = (fileBreakdown["–ö–µ—à-—Ñ–∞–π–ª—ã"] ?? 0) + subdir.size
                deletableSize += subdir.size * 95 / 100 // 95% –∫–µ—à–∞ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                recommendations.append(DetailedRecommendation(
                    title: "Caches",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .safe,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–µ—à-—Ñ–∞–π–ª—ã. –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å - —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
                ))
            }
            else if name == "logs" {
                fileBreakdown["–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"] = (fileBreakdown["–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"] ?? 0) + subdir.size
                deletableSize += subdir.size * 80 / 100 // 80% –ª–æ–≥–æ–≤ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                recommendations.append(DetailedRecommendation(
                    title: "Logs",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏. –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞."
                ))
            }
            else if name == "application support" {
                fileBreakdown["–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] = (fileBreakdown["–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] ?? 0) + subdir.size
                deletableSize += subdir.size * 20 / 100 // –¢–æ–ª—å–∫–æ 20% (–∫–µ—à)
                recommendations.append(DetailedRecommendation(
                    title: "Application Support",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–ª–∞–≥–∏–Ω—ã. –£–¥–∞–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–µ—à."
                ))
            }
            else if name == "containers" {
                fileBreakdown["–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] = (fileBreakdown["–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"] ?? 0) + subdir.size
                deletableSize += subdir.size * 30 / 100 // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                recommendations.append(DetailedRecommendation(
                    title: "Containers",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (sandbox). –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."
                ))
            }
            else if name == "frameworks" {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Frameworks",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .critical,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –ö–†–ò–¢–ò–ß–ù–û - –ù–ï –£–î–ê–õ–Ø–¢–¨!"
                ))
            }
            else if name == "extensions" {
                fileBreakdown["–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"] = (fileBreakdown["–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Extensions",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .high,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –ø–ª–∞–≥–∏–Ω—ã. –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã."
                ))
            }
            else if name == "launchdaemons" || name == "launchagents" {
                fileBreakdown["–°–ª—É–∂–±—ã –∑–∞–ø—É—Å–∫–∞"] = (fileBreakdown["–°–ª—É–∂–±—ã –∑–∞–ø—É—Å–∫–∞"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .critical,
                    description: "–°–ª—É–∂–±—ã –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ö–†–ò–¢–ò–ß–ù–û - –ù–ï –£–î–ê–õ–Ø–¢–¨!"
                ))
            }
            else if name == "preferences" {
                fileBreakdown["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"] = (fileBreakdown["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Preferences",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .high,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –£–¥–∞–ª–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                ))
            }
            else if name == "printers" {
                fileBreakdown["–î—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"] = (fileBreakdown["–î—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"] ?? 0) + subdir.size
                deletableSize += subdir.size * 50 / 100 // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã
                recommendations.append(DetailedRecommendation(
                    title: "Printers",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–î—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤. –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤."
                ))
            }
            else if name == "sounds" {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Sounds",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .low,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–∏—Ç –∑–≤—É–∫–∏ —Å–∏—Å—Ç–µ–º—ã."
                ))
            }
            else if name == "fonts" {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Fonts",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã. –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."
                ))
            }
            else if name == "keychains" {
                fileBreakdown["–°–≤—è–∑–∫–∏ –∫–ª—é—á–µ–π"] = (fileBreakdown["–°–≤—è–∑–∫–∏ –∫–ª—é—á–µ–π"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Keychains",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .critical,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤—è–∑–∫–∏ –∫–ª—é—á–µ–π —Å –ø–∞—Ä–æ–ª—è–º–∏. –ö–†–ò–¢–ò–ß–ù–û - –ù–ï –£–î–ê–õ–Ø–¢–¨!"
                ))
            }
            else if name == "colorpickers" || name == "colorsync" {
                fileBreakdown["–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"] = (fileBreakdown["–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –ø–∏–∫–µ—Ä—ã. –í–ª–∏—è–µ—Ç –Ω–∞ —Ü–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á—É."
                ))
            }
            else if name == "internet plugins" {
                fileBreakdown["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–ª–∞–≥–∏–Ω—ã"] = (fileBreakdown["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–ª–∞–≥–∏–Ω—ã"] ?? 0) + subdir.size
                deletableSize += subdir.size * 60 / 100 // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–ª–∞–≥–∏–Ω—ã
                recommendations.append(DetailedRecommendation(
                    title: "Internet Plug-Ins",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–ü–ª–∞–≥–∏–Ω—ã –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤. –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–ª–∞–≥–∏–Ω—ã (Java, Flash –∏ —Ç.–¥.)."
                ))
            }
            else if name == "quicklook" {
                fileBreakdown["–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"] = (fileBreakdown["–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "QuickLook",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .low,
                    description: "–ü–ª–∞–≥–∏–Ω—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–∏—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä."
                ))
            }
            else if name == "spotlight" {
                fileBreakdown["Spotlight –∏–Ω–¥–µ–∫—Å—ã"] = (fileBreakdown["Spotlight –∏–Ω–¥–µ–∫—Å—ã"] ?? 0) + subdir.size
                deletableSize += subdir.size * 70 / 100 // –°—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                recommendations.append(DetailedRecommendation(
                    title: "Spotlight",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–ò–Ω–¥–µ–∫—Å—ã –ø–æ–∏—Å–∫–∞ Spotlight. –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –∏–Ω–¥–µ–∫—Å—ã, –Ω–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫."
                ))
            }
            else if name == "services" {
                fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"] = (fileBreakdown["–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Services",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .high,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ —Å–ª—É–∂–±—ã. –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å."
                ))
            }
            else if name == "widgets" {
                fileBreakdown["–í–∏–¥–∂–µ—Ç—ã Dashboard"] = (fileBreakdown["–í–∏–¥–∂–µ—Ç—ã Dashboard"] ?? 0) + subdir.size
                deletableSize += subdir.size * 80 / 100 // Dashboard —É—Å—Ç–∞—Ä–µ–ª
                recommendations.append(DetailedRecommendation(
                    title: "Widgets",
                    size: subdir.size,
                    isDeletable: true,
                    impact: .low,
                    description: "–í–∏–¥–∂–µ—Ç—ã Dashboard (—É—Å—Ç–∞—Ä–µ–ª –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö macOS). –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."
                ))
            }
            else if name == "screen savers" {
                fileBreakdown["–ó–∞—Å—Ç–∞–≤–∫–∏"] = (fileBreakdown["–ó–∞—Å—Ç–∞–≤–∫–∏"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Screen Savers",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .low,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞—Å—Ç–∞–≤–∫–∏. –£–¥–∞–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç –≤—ã–±–æ—Ä –∑–∞—Å—Ç–∞–≤–æ–∫."
                ))
            }
            else if name == "desktop pictures" {
                fileBreakdown["–û–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"] = (fileBreakdown["–û–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: "Desktop Pictures",
                    size: subdir.size,
                    isDeletable: false,
                    impact: .low,
                    description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –£–¥–∞–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç –≤—ã–±–æ—Ä –æ–±–æ–µ–≤."
                ))
            }
            else {
                fileBreakdown["–ü—Ä–æ—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã"] = (fileBreakdown["–ü—Ä–æ—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã"] ?? 0) + subdir.size
                recommendations.append(DetailedRecommendation(
                    title: subdir.displayName,
                    size: subdir.size,
                    isDeletable: false,
                    impact: .medium,
                    description: "–°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. –¢—Ä–µ–±—É–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º."
                ))
            }
        }
        
        let detailedInfo = """
        üìö –ê–ù–ê–õ–ò–ó /Library
        
        –°–∏—Å—Ç–µ–º–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ macOS —Å–æ–¥–µ—Ä–∂–∏—Ç:
        ‚Ä¢ –ö–µ—à-—Ñ–∞–π–ª—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å)
        ‚Ä¢ –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã (—Å—Ç–∞—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å)
        ‚Ä¢ –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–ù–ï –£–î–ê–õ–Ø–¢–¨!)
        ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
        ‚Ä¢ –î—Ä–∞–π–≤–µ—Ä—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)
        
        üí° –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å: Caches, —Å—Ç–∞—Ä—ã–µ Logs, Spotlight –∏–Ω–¥–µ–∫—Å—ã, Widgets
        ‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: Application Support, Containers, Printers
        üõë –ù–ï –£–î–ê–õ–Ø–¢–¨: Frameworks, Extensions, LaunchDaemons, Keychains
        """
        
        return SystemFolderAnalysis(
            path: path,
            totalSize: dirInfo.size,
            deletableSize: deletableSize,
            fileBreakdown: fileBreakdown,
            recommendations: recommendations,
            detailedInfo: detailedInfo
        )
    }
    
    // MARK: - Helper Functions
    private static func getInstalledApps() -> [String] {
        var apps: [String] = []
        let appPaths = ["/Applications", NSHomeDirectory() + "/Applications"]
        
        for appPath in appPaths {
            if let enumerator = FileManager.default.enumerator(atPath: appPath) {
                while let file = enumerator.nextObject() as? String {
                    if file.hasSuffix(".app") {
                        apps.append(file.replacingOccurrences(of: ".app", with: ""))
                    }
                }
            }
        }
        
        return apps
    }
}

// MARK: - Data Models
struct SystemFolderAnalysis {
    let path: String
    let totalSize: Int64
    let deletableSize: Int64
    let fileBreakdown: [String: Int64]
    let recommendations: [DetailedRecommendation]
    let detailedInfo: String
    
    var deletablePercent: Int {
        guard totalSize > 0 else { return 0 }
        return Int(Double(deletableSize) / Double(totalSize) * 100)
    }
    
    var formattedTotalSize: String {
        ByteCountFormatter.string(fromByteCount: totalSize, countStyle: .file)
    }
    
    var formattedDeletableSize: String {
        ByteCountFormatter.string(fromByteCount: deletableSize, countStyle: .file)
    }
}

struct DetailedRecommendation: Identifiable {
    let id = UUID()
    let title: String
    let size: Int64
    let isDeletable: Bool
    let impact: ImpactLevel
    let description: String
    
    var formattedSize: String {
        ByteCountFormatter.string(fromByteCount: size, countStyle: .file)
    }
}

enum ImpactLevel: String {
    case safe = "–ë–µ–∑–æ–ø–∞—Å–Ω–æ"
    case low = "–ù–∏–∑–∫–∏–π"
    case medium = "–°—Ä–µ–¥–Ω–∏–π"
    case high = "–í—ã—Å–æ–∫–∏–π"
    case critical = "–ö—Ä–∏—Ç–∏—á–Ω—ã–π"
    
    var color: String {
        switch self {
        case .safe: return "green"
        case .low: return "blue"
        case .medium: return "yellow"
        case .high: return "orange"
        case .critical: return "red"
        }
    }
}

// MARK: - Library Scanning Helper
extension SystemFolderAnalyzer {
    static func scanLibrarySubdirectoriesAsync(path: String) async -> [DirectoryInfo] {
        return await withCheckedContinuation { continuation in
            DispatchQueue.global(qos: .userInitiated).async {
                let result = scanLibrarySubdirectories(path: path)
                continuation.resume(returning: result)
            }
        }
    }
    
    static func scanLibrarySubdirectories(path: String) -> [DirectoryInfo] {
        var subdirectories: [DirectoryInfo] = []
        let fileManager = FileManager.default
        
        do {
            let contents = try fileManager.contentsOfDirectory(atPath: path)
            
            for item in contents {
                let itemPath = "\(path)/\(item)"
                var isDirectory: ObjCBool = false
                
                if fileManager.fileExists(atPath: itemPath, isDirectory: &isDirectory) && isDirectory.boolValue {
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    let size = getDirectorySize(at: itemPath)
                    
                    let subdir = DirectoryInfo(
                        path: itemPath,
                        size: size,
                        fileCount: 0, // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
                        subdirectories: [],
                        lastModified: nil
                    )
                    
                    subdirectories.append(subdir)
                }
            }
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è \(path): \(error)")
        }
        
        return subdirectories.sorted { $0.size > $1.size }
    }
    
    private static func getDirectorySize(at path: String) -> Int64 {
        let fileManager = FileManager.default
        var totalSize: Int64 = 0
        
        if let enumerator = fileManager.enumerator(atPath: path) {
            for case let file as String in enumerator {
                let filePath = "\(path)/\(file)"
                
                do {
                    let attributes = try fileManager.attributesOfItem(atPath: filePath)
                    if let fileSize = attributes[.size] as? Int64 {
                        totalSize += fileSize
                    }
                } catch {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                }
            }
        }
        
        return totalSize
    }
    
    static func createTestLibraryData() -> [DirectoryInfo] {
        return [
            DirectoryInfo(path: "/Library/Caches", size: 15_000_000_000, fileCount: 50000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Logs", size: 2_000_000_000, fileCount: 10000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Application Support", size: 25_000_000_000, fileCount: 100000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Frameworks", size: 8_000_000_000, fileCount: 5000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Extensions", size: 1_500_000_000, fileCount: 2000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/LaunchDaemons", size: 50_000_000, fileCount: 100, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Preferences", size: 500_000_000, fileCount: 5000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Printers", size: 1_000_000_000, fileCount: 3000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Fonts", size: 800_000_000, fileCount: 2000, subdirectories: [], lastModified: nil),
            DirectoryInfo(path: "/Library/Keychains", size: 200_000_000, fileCount: 100, subdirectories: [], lastModified: nil)
        ]
    }
}

